def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Android Developers > Android Studio > User Guild > アプリの署名 より
// https://developer.android.com/studio/publish/app-signing?hl=ja
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Google Play 64bit必須化規約による、Flutter アプリの (32/64bit) Multiple APK 対応
// 　NDK などで APK 内に ABI バイナリを持つアプリの 64bit コード版必須制限の対応について
// 　0.通常の Java/Kotlin で作られた Android アプリは、NDK/ABI を含まないので対象外です。
// 　1.Flutter アプリの場合は、Skia エンジン内で ABI バイナリを使っているため 64bit 対応が必要です。
// 　2.対応端末を増やすために 32bit版の APK も必要な場合は、Multiple APK としてリリースします。
// 　　Flutter は、32bit/64bit 両者の ABI を含んだユニバーサル APK を作成できません。
// 　　このため 32bit/64bit ごとに、app/build.gradle の versionName は同じだが、versionCode が異なる APK を作成し、
// 　　Multiple APK を利用したアプリとして、32/64bit APK をGoogle Play にリリースする必要があります。
//
// 　　※ pubspec.yaml 内で、
// 　　※ 　versionName ⇒ <major>.<minor>.<point> は、任意と決め、
// 　　※ 　versionCode ⇒ 任意の ベース値 とします。
// 　　※ android/app/build.gradle 内で、
// 　　※ 　NDK の target-platform プロパティや、任意の環境変数で ABI を区別できるようにして、
// 　　※ 　Google Play 内部でのバージョンコードは、ベース値 * 10 + α となるよう、
// 　　※ 　CPU別で（32bitなら+1、64bitなら+2）値を追加する関数 parseAbiCode() を適用します。
// 　　※　 (α には、32bit版:1、64bit版:2、ローカルビルド/DeployGate版:0 が指定されます)
// 　　※
// 　　※ 明示的に 64bit版の APK を作るコマンド: flutter build apk --release --target-platform=android-arm64
// 　　※ 明示的に 32bit版の APK を作るコマンド: flutter build apk --release --target-platform=android-arm
// 　　※ NDK を使わない場合は、上記実行時に 32/64bit を識別するため ABI_TYPE 等の任意環境変数を設定する必要があります。
// 　　
// 　3.リリース作業の簡易化のため、android/toolsに 32/64bit APK 作成シェルスクリプトを追加しています。
// 　   build_arm32-v7a_apk.sh/build_arm64-v8a_apk.sh は、同一 versionName だが別々の versionCode になるAPKを作成します。
// 　　　シェルスクリプトは、プロジェクトルートで、android/tools/build_arm64-v8a_apk.sh で実行できます。
//
// 　【参考】
// 　　Flutter for Android の ABI (armeabi-v7a と arm64-v8a)
// 　　https://qiita.com/najeira/items/3e2914d007e990af947c
//
// 　　Multiple APK support
// 　　https://developer.android.com/google/play/publishing/multiple-apks
//
// 　　Get Android .apk file VersionName or VersionCode WITHOUT installing apk
// 　　https://stackoverflow.com/questions/13469147/get-android-apk-file-versionname-or-versioncode-without-installing-apk
//

android {
    compileSdkVersion 27

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // versionCode や versionName は、Flutter でのアプリビルド(*1)で自動生成される android/local.properties から提供されます。
        // (*1) 例：flutter build apk --build-name=1.0.2 --build-number=3 など
        //      versionName は、ビルド時に強制的な指定がなくければ、pubspec.yaml の version: 項目（例:1.0.0+1 の 1.0.0）と同期します。
        //      versionCode は、ビルド時に強制的な指定がなくければ、pubspec.yaml の version: 項目（例:1.0.0+1 の 1）と同期します。
        applicationId "app.cchlab.flutter.android.devfest2018"
        minSdkVersion 16
        targetSdkVersion 27
        multiDexEnabled true // ライブラリ関数 64k over 問題のため multi-dex 対応化 ⇒ https://developer.android.com/studio/build/multidex
        versionCode flutterVersionCode.toInteger() * 10 + parseAbiCode() // Multiple APK 対応
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64' // NDK abi別対応設定
    }

    // Android Developers > Android Studio > User Guild > アプリの署名 より
    // https://developer.android.com/studio/publish/app-signing?hl=ja
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            // TODO: Add your own signing config for the debug build.
            // Signing with the debug keys for now, so `flutter run --debug` works.
            signingConfig signingConfigs.config
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.config
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // FIXME 2018/09/10 現在の firebase プラグイン問題点の直接回避
    // ライブラリ関数 64k over 問題のため Android 5.0 以下でも multi-dex 対応化
    // (API 21 以降は標準で multi-dex 対応しているため、
    //  当該 multi-dex 指定と defaultConfig: multiDexEnabled 指定が不要になります)
    //
    // 【参考元】
    // Enable multidex for apps with over 64K methods
    // https://developer.android.com/studio/build/multidex
    //implementation 'com.android.support:multidex:1.0.3'

    // FIXME 2018/09/10 image_picker ライブラリ依存の直接回避
    // DevFest 2018 サービスで利用している image_picker ライブラリが
    // android/build.gradle で support ライブラリのバージョンを指定(*1)しているため、
    // サポートライブラリの依存バージョンを指定して導入する。
    // (*1)dependencies { api 'com.android.support:support-v4:27.1.1' }
    implementation 'com.android.support:support-v4:27.1.1'

    /*
    // DevFest 2018 サービスデモ用に追加
    implementation 'com.google.firebase:firebase-core:16.0.3'
    implementation 'com.google.firebase:firebase-auth:16.0.3'
    implementation 'com.google.android.gms:play-services-auth:16.0.0'
    implementation 'com.google.firebase:firebase-firestore:17.1.0'
    implementation 'com.google.firebase:firebase-messaging:17.3.0'
    implementation 'com.google.firebase:firebase-storage:16.0.1'
    */
}

// Multiple APK 対応
def parseAbiCode() {
    /*
    // NDK を利用している場合は、target-platform プロパティが使えます
    def abiType = project.property('target-platform')
    */
    def abiType = System.getenv()['ABI_TYPE']
    println "abiType=" + abiType

    def abiCode = 0
    switch (abiType) {
        case 'android-arm64':
            abiCode = 2
            break
        case 'android-arm':
            abiCode = 1
            break
        default:
            abiCode = 0
            break
    }
    return abiCode
}

// DevFest 2018 サービスデモ用に追加
apply plugin: 'com.google.gms.google-services'